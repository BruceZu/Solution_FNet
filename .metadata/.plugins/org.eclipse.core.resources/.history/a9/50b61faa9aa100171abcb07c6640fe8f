Problem 5: If the project is based on Spring 4.3.* and Hibernate 5.2, 
is it possible to mock DB in JUnit test? 
if not, how to do the JUnit test?  Give cases to show how to do it.

Let us consider a scenario where all the Employee details are present in a DB and 
that we are trying to retrieve `EmployeeSalary` based on his `EmployeeID`.  

In a real world scenario, a Service class would make a call to the underlying
DataAccess class to retrieve the Employee information from the DB based on his ID.

The above scenario can be imitated by mocking a DB in JUnit in following ways:
1. EITHER we write a number of fake class implementations for our DataAccess class
which would return the value that we supply every time the `getEmployeeSalary`
(or any of the data access related calls) is called.
2. OR We can use one of the available frameworks to mock the objects during 
Unit testing like Mockito. 

The following shows the above two discussed implementations for getting 
`EmployeeSalary` information:

1. Fake DataAccess Method:
Consider we have the following EmployeeService class:
public class EmployeeService{
	private DataAccess dataAccess;
	public EmployeeService(DataAccess dataAccess)
	{
	this.dataAccess = dataAccess;
	}
	public double employeeSalary(Integer employeeID)
	{
	double employeeSalary = dataAccess.getEmployeeSalary(employeeID);
	return employeeSalary;
	}

}