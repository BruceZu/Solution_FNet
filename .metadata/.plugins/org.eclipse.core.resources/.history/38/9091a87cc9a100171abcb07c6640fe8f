package main.com.fNet.solutions.solution2;

public class MultiDimensionArray {
	private Object[] multiDimArray;
	private int[] dimensions;
	private int[] multipliers;

	public MultiDimensionArray(int[] dimensions) {
		int arraySize = 1;
		multipliers = new int[dimensions.length];
		for (int i = dimensions.length - 1; i >= 0; i--) {
			multipliers[i] = arraySize;
			arraySize *= dimensions[i];
		}
		multiDimArray = new Object[arraySize];
		this.dimensions = dimensions;
	}

	// This is a provided function, Assume it works
	public static Long getValue(int... indexOfDimension) {
		// ...
		Long value = 0L;
		return value;
	}


	// lengthOfDeminsion: each dimension's length, assume it is valid:
	// lengthOfDeminsion[i]>0.
	public static Long sum(MultiDimensionArray mArray, int[] lengthOfDemension) {

		Long sum = 0L; // The final sum that has to be returned.
		Object[] arr = mArray.multiDimArray;
		for( int i=0; i < arr.length; i++){
			sum += (long)arr[i];
		}
		// int numberOfDimensions = lengthOfDemension.length;
		// int[] arr = new int[numberOfDimensions]; //Initialize an array with
		// all zeros
		// int at = numberOfDimensions-2;
		// do
		// {
		// for (tuple[n-1] = 0; tuple[n-1] < lengthOfDemension[n-1];
		// tuple[n-1]++)
		// {
		// sum += getValue(tuple);
		// }
		// while (at >= 0 && ++tuple[at] == lengthOfDemension[at])
		// {
		// tuple[at--] = 0;
		// }
		// if (at >= 0) at = n-2;
		// }
		// while (at >= 0);
		//
		return sum;
	}

	public static void main(String[] args) {
		int[] dimensions = {2,2,2};
		MultiDimensionArray mArray = new MultiDimensionArray(dimensions);
		Long result = mArray.sum(mArray, dimensions);
		System.out.println("The sum of the multidimension array is: " + result);
	}
}
