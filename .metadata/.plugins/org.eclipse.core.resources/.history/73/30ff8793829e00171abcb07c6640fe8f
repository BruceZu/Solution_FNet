package main.com.fNet.solutions.solution4;

/*
 * Problem 4: Implementation of Singleton class
 * Solution:
 * The Singleton pattern is a design pattern which specifies that a class can be 
 * instantiated only once and access to that one single instance is provided. 
 * 
 * We can implement it in 2 ways:
 * 1. Lazy Initialization - here as shown in the code below, a new instance is created
 * only if it does not exist. 
 * 2. Eager Initialization - here always a new instance is created even
 * though we necessarily don't need it
 * 
 * */
public class SingletonImplementationLazy {
	private static SingletonImplementationLazy singletonInstance =null;
	
	private SingletonImplementationLazy(){
		/*
		 * Constructor here is made private to ensure that no one can
		 * instantiate this class
		 * */
	}
	
	public static SingletonImplementationLazy getSingletonInstance(){
		if (singletonInstance == null)
			singletonInstance = new SingletonImplementationLazy();
		return singletonInstance;
	}
	
}
